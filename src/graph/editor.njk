---
siteName: causti • co
title: graph editor
description: graph editor
eleventyExcludeFromCollections: true
override:tags: []
---
<!DOCTYPE html>
<html lang="en">
  <head prefix="og: https://ogp.me/ns#">
    <meta charset="utf-8" />
    <title>{{ siteName }}{% if title %} — {{ title }}{% endif %}</title>
    <link rel="stylesheet" href="/assets/styles/editor.css" />
    <link rel="icon" href="/assets/icons/favicon.png" sizes="48x48" />
    <link rel="icon" href="/assets/icons/favicon.svg" sizes="any" />
    <link rel="canonical" href="https://causti.co{{ page.url }}" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="author" content="Martín Valdés de León" />
    <meta name="generator" content="{{ eleventy.generator }}" />
    <meta name="description" content="{{ description }}" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
    <meta property="og:site_name" content="{{ siteName }}" />
    <meta property="og:title" content="{{ title }}" />
    <meta property="og:description" content="{{ description }}" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://causti.co{{ page.url }}" />
    {#- Ideally og.image is driven by the data cascade. However, I did not find a way to set data based on `collections`. #}
    {#- To support using the last photo as og.image, we make it the default here. #}
    {%- set photo = collections.photo | last -%}
    {%- set largest = photo.data.responsive | last %}
    <meta property="og:image" content="https://causti.co{{ og.image.url or largest.url }}" />
    <meta property="og:image:type" content="{{ og.image.type or largest.sourceType }}" />
    <meta property="og:image:width" content="{{ og.image.width or largest.width }}" />
    <meta property="og:image:height" content="{{ og.image.height or largest.height }}" />
    <meta property="og:image:alt" content="{{ og.image.alt or photo.data.alt }}" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@mvaldesdeleon" />
    <meta name="twitter:creator" content="@mvaldesdeleon" />
  </head>
  <body>
    <header>
      <h1><a href="{{ page.url }}" tabindex="-1">causti </a><a href="{{ page.url }}" tabindex="-1"><img class="dot" src="/assets/images/causti.co.alt.svg" alt="·" width="640" height="640" /></a><a href="{{ page.url }}" tabindex="-1"> co</a></h1>
    </header>
    <main>
      <article>
        <section id="graph-input">
          <h2>input</h2>
          <div class="code-editor">
            <div id="code-output"></div>
            <textarea spellcheck="false" id="code-input">
const substeps = 4;

function step(x, y, {steps}) {
  const yy = Math.floor(y * substeps / steps) * substeps;
  const xx = Math.floor(x * substeps / steps);
  return (x | y) % (xx + yy);
}</textarea>
          </div>
          <div class="buttons">
            <button id="render">render</button>
          </div>
        </section>
        <section id="graph-output">
          <h2>output</h2>
          <svg id="canvas" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="512" height="512"></svg>
          <div class="buttons">
            <button id="downloadSVG">download svg</button>
            <button id="downloadPNG">download png</button>
          </div>
        </section>
      </article>
      <script type="module">
        // be sure to specify the exact version
        import { codeToHtml } from 'https://esm.sh/shiki@1.3.0'
        // or
        // import { codeToHtml } from 'https://esm.run/shiki@1.3.0'

        const $input = document.getElementById("code-input");
        const $output = document.getElementById("code-output");
        const $render = document.getElementById("render");
        const $canvas = document.getElementById("canvas");
        const $downloadSVG = document.getElementById("downloadSVG");
        const $downloadPNG = document.getElementById("downloadPNG");

        async function update() {
          let code = $input.value;

          // Trailing newlines are ingored by <pre><code>, and cause a scrollHeight miss-match
          if (code.endsWith("\n")) {
            code += " ";
          }

          $output.innerHTML = await codeToHtml(code, {
            lang: "javascript",
            theme: "synthwave-84"
          });

          syncScroll();
        }

        function syncScroll() {
          const $shiki = document.querySelector(".shiki");

          $shiki.scrollTop = $input.scrollTop;
          $shiki.scrollLeft = $input.scrollLeft;
        }

        function render() {
          $render.blur();

          const code = $input.value;
          const step = new Function("x", "y", "props", `"use strict";${code};return step(x, y, props);`);

          const props = {
            width: 512,
            height: 512,
            steps: 256
          };

          // Clear status messages from previous render
          
          // Clear previous render
          while ($canvas.firstChild) {
            $canvas.removeChild($canvas.firstChild);
          }

          const $group = document.createElementNS("http://www.w3.org/2000/svg", "g");
          $group.setAttribute("stroke", "none");
          $group.setAttribute("fill", "none");

          const hsize = props.width / props.steps;
          const vsize = props.height / props.steps;

          outter: for (let y = 0; y < props.steps; y++) {
            for (let x = 0; x < props.steps; x++) {
              const $rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
              $rect.setAttribute("x", x * hsize);
              $rect.setAttribute("y", y * vsize);
              $rect.setAttribute("width", hsize);
              $rect.setAttribute("height", vsize);
              
              try {
                const value = step(x, y, props);
                
                $rect.setAttribute("fill", value ? "black" : "darkorange");
              } catch (exception) {
                console.log(exception)
                // Show error status
                break outter;
              }

              $group.appendChild($rect);
            }
          }

          $canvas.appendChild($group);

          // Show success status
        }

        function downloadSVG() {
          $downloadSVG.blur();

          const svg = $canvas.outerHTML;
          const blob = new Blob([`<?xml version="1.0" encoding="utf-8"?>\n${svg}`], { type: "image/svg+xml;charset=utf-8" });
          const url = URL.createObjectURL(blob);
          const $a = document.createElement("a");
          $a.setAttribute("download", "output.svg");
          $a.setAttribute("href", url);
          $a.style.display = "none";
          $downloadSVG.insertAdjacentElement("afterend", $a);
          $a.click();
          $a.remove();
          URL.revokeObjectURL(url);
        }

        function downloadPNG() {
          $downloadPNG.blur();

          const svg = $canvas.outerHTML;
          const blob = new Blob([`<?xml version="1.0" encoding="utf-8"?>\n${svg}`], { type: "image/svg+xml;charset=utf-8" });
          const url = URL.createObjectURL(blob);
          const image = new Image(512, 512);
          image.src = url;

          const $png = document.createElement("canvas");
          $png.width = 512;
          $png.height = 512;
          const context = $png.getContext("2d");

          image.addEventListener("load", () => {
            context.drawImage(image, 0, 0, 512, 512);
            $png.toBlob(blob => {
              const url = URL.createObjectURL(blob);
              const $a = document.createElement("a");
              $a.setAttribute("download", "output.png");
              $a.setAttribute("href", url);
              $a.style.display = "none";
              $downloadPNG.insertAdjacentElement("afterend", $a);
              $a.click();
              $a.remove();
              URL.revokeObjectURL(url);  
            });
            URL.revokeObjectURL(url);
          });
        }

        $input.addEventListener("input", update);
        $input.addEventListener("scroll", syncScroll);
        $render.addEventListener("click", render);
        $downloadSVG.addEventListener("click", downloadSVG);
        $downloadPNG.addEventListener("click", downloadPNG);

        update();
      </script>
    </main>
    <footer>
      <div class="content">
        <p class="cc" xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/">
          <a property="dct:title" rel="cc:attributionURL" href="https://causti.co/">{{ siteName }}</a> © 2024 by <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://twitter.com/mvaldesdeleon">Martín Valdés de León</a>, is licensed under <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY-NC-ND 4.0<span class="icons"><img class="icon" src="/assets/images/cc/cc.alt.svg" alt="CC" width="64" height="64" /><img class="icon" src="/assets/images/cc/by.alt.svg" alt="BY" width="64" height="64" /><img class="icon" src="/assets/images/cc/nc.alt.svg" alt="NC" width="64" height="64" /><img class="icon" src="/assets/images/cc/nd.alt.svg" alt="ND" width="64" height="64" /></span><span class="alt-icons"><img class="icon" src="/assets/images/cc/cc.svg" alt="CC" width="64" height="64" /><img class="icon" src="/assets/images/cc/by.svg" alt="BY" width="64" height="64" /><img class="icon" src="/assets/images/cc/nc.svg" alt="NC" width="64" height="64" /><img class="icon" src="/assets/images/cc/nd.svg" alt="ND" width="64" height="64" /></span></a>
        </p>
      </div>
    </footer>
  </body>
</html>